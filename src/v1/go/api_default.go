/*
 * cloudwpss23-openapi-cyan
 *
 * OpenAPI Reference für das CloudWP der HAW Hamburg für das SommerSemster 2023
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteV1BucketName",
			strings.ToUpper("Delete"),
			"/v1/Bucket/{BucketName}",
			c.DeleteV1BucketName,
		},
		{
			"DeleteV1FileName",
			strings.ToUpper("Delete"),
			"/v1/Bucket/{BucketName}/File/{FileName}",
			c.DeleteV1FileName,
		},
		{
			"GetV1BucketName",
			strings.ToUpper("Get"),
			"/v1/Bucket/{BucketName}",
			c.GetV1BucketName,
		},
		{
			"GetV1Buckets",
			strings.ToUpper("Get"),
			"/v1/Buckets",
			c.GetV1Buckets,
		},
		{
			"GetV1FileName",
			strings.ToUpper("Get"),
			"/v1/Bucket/{BucketName}/File/{FileName}",
			c.GetV1FileName,
		},
		{
			"GetV1Files",
			strings.ToUpper("Get"),
			"/v1/Bucket/{BucketName}/Files",
			c.GetV1Files,
		},
		{
			"OptionsV1BucketName",
			strings.ToUpper("Options"),
			"/v1/Bucket/{BucketName}",
			c.OptionsV1BucketName,
		},
		{
			"OptionsV1Buckets",
			strings.ToUpper("Options"),
			"/v1/Buckets",
			c.OptionsV1Buckets,
		},
		{
			"OptionsV1FileName",
			strings.ToUpper("Options"),
			"/v1/Bucket/{BucketName}/File/{FileName}",
			c.OptionsV1FileName,
		},
		{
			"OptionsV1Files",
			strings.ToUpper("Options"),
			"/v1/Bucket/{BucketName}/Files",
			c.OptionsV1Files,
		},
		{
			"PatchV1BucketName",
			strings.ToUpper("Patch"),
			"/v1/Bucket/{BucketName}",
			c.PatchV1BucketName,
		},
		{
			"PostV1BucketName",
			strings.ToUpper("Post"),
			"/v1/Bucket/{BucketName}",
			c.PostV1BucketName,
		},
		{
			"PutV1FileName",
			strings.ToUpper("Put"),
			"/v1/Bucket/{BucketName}/File/{FileName}",
			c.PutV1FileName,
		},
	}
}

// DeleteV1BucketName - 
func (c *DefaultApiController) DeleteV1BucketName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	result, err := c.service.DeleteV1BucketName(r.Context(), bucketNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteV1FileName - 
func (c *DefaultApiController) DeleteV1FileName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	fileNameParam := params["FileName"]
	
	result, err := c.service.DeleteV1FileName(r.Context(), bucketNameParam, fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetV1BucketName - Your GET endpoint
func (c *DefaultApiController) GetV1BucketName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	result, err := c.service.GetV1BucketName(r.Context(), bucketNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetV1Buckets - Your GET endpoint
func (c *DefaultApiController) GetV1Buckets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetV1Buckets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetV1FileName - Your GET endpoint
func (c *DefaultApiController) GetV1FileName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	fileNameParam := params["FileName"]
	
	result, err := c.service.GetV1FileName(r.Context(), bucketNameParam, fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetV1Files - Your GET endpoint
func (c *DefaultApiController) GetV1Files(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	result, err := c.service.GetV1Files(r.Context(), bucketNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// OptionsV1BucketName - 
func (c *DefaultApiController) OptionsV1BucketName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	result, err := c.service.OptionsV1BucketName(r.Context(), bucketNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// OptionsV1Buckets - 
func (c *DefaultApiController) OptionsV1Buckets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.OptionsV1Buckets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// OptionsV1FileName - 
func (c *DefaultApiController) OptionsV1FileName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	fileNameParam := params["FileName"]
	
	result, err := c.service.OptionsV1FileName(r.Context(), bucketNameParam, fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// OptionsV1Files - 
func (c *DefaultApiController) OptionsV1Files(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	result, err := c.service.OptionsV1Files(r.Context(), bucketNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PatchV1BucketName - 
func (c *DefaultApiController) PatchV1BucketName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	permissionParam := []Permission{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range permissionParam {
		if err := AssertPermissionRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchV1BucketName(r.Context(), bucketNameParam, permissionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostV1BucketName - 
func (c *DefaultApiController) PostV1BucketName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	postV1BucketNameRequestParam := PostV1BucketNameRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postV1BucketNameRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostV1BucketNameRequestRequired(postV1BucketNameRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostV1BucketName(r.Context(), bucketNameParam, postV1BucketNameRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PutV1FileName - 
func (c *DefaultApiController) PutV1FileName(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	bucketNameParam := params["BucketName"]
	
	fileNameParam := params["FileName"]
	
	
	dataParam, err := ReadFormFileToTempFile(r, "data")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.PutV1FileName(r.Context(), bucketNameParam, fileNameParam, dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
