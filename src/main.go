/*
 * customerfacing
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"flag"
	"fmt"
	"github.com/gorilla/handlers"
	_ "github.com/microsoft/go-mssqldb"
	"github.com/scrapes/haw-cloudwp-openapi/src/commons"
	controller2 "github.com/scrapes/haw-cloudwp-openapi/src/controller"
	"github.com/scrapes/haw-cloudwp-openapi/src/db"
	"github.com/scrapes/haw-cloudwp-openapi/src/middleware"
	"github.com/scrapes/haw-cloudwp-openapi/src/service"
	"github.com/scrapes/haw-cloudwp-openapi/src/storage"
	openapi "github.com/scrapes/haw-cloudwp-openapi/src/v1/go"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"log"
	"net/http"
	"os"
	"strings"
)

var dbcn = new(db.Connection)
var server = "cloudwp.mysql.database.azure.com"
var dbport = 3306
var user = "cloudwp"
var database = "cloudwpsql"
var store commons.IStorage

func main() {
	log.Printf("Server started")
	pdbpass := flag.String("dbpassword", "", "")
	flag.Parse()

	port := os.Getenv("PORT")
	if port == "" {
		port = "80"
		log.Printf("defaulting to port %s", port)
	}

	password := *pdbpass
	isNotAzure := password == ""

	auth0Domain := os.Getenv("AUTH0_DOMAIN")
	auth0Audience := os.Getenv("AUTH0_AUDIENCE")
	corsOrigins := os.Getenv("CORS_ORIGINS")

	if auth0Domain == "" {
		auth0Domain = "dev-5n5igzycxiz22p3w.us.auth0.com"
	}

	if auth0Audience == "" {
		auth0Audience = "http://localhost:3001"
	}

	if corsOrigins == "" {
		corsOrigins = "http://localhost:3000,https://app.cloudwp.anwski.de,https://api.cloudwp.anwski.de"
	}

	if isNotAzure {
		log.Println("Is Not Azure!")
		connector, err := db.GoogleConnectWithConnector()
		if err != nil {
			log.Printf(err.Error())
			os.Exit(-1)
		}
		dbcn.Init(connector)
		store = new(storage.GCloudStorage)
	} else {
		log.Println("ITS AZURE!! :)")
		var err error
		// Create connection pool
		dsn := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local", user, password, server, dbport, database)
		gormDB, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
		if err != nil {
			log.Fatal("Error creating connection pool: ", err.Error())
		}
		dbcn.DB = gormDB
		store = new(storage.AzureStorage)
	}

	log.Println("Init gorm...")
	s := new(service.V1Service)
	s.SetDB(dbcn)
	controller := new(controller2.V1Controller).Init(s, store)
	allowedOrigins := strings.Split(corsOrigins, ",")

	router := openapi.NewRouter(controller)

	router.Use(handlers.CORS(
		handlers.AllowedOrigins(allowedOrigins),
		handlers.AllowCredentials(),
		handlers.AllowedHeaders([]string{"X-Requested-With", "Content-Type", "Authorization"}),
		handlers.AllowedMethods([]string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"}),
	))

	router.Use(middleware.EnsureValidToken(auth0Domain, auth0Audience))

	log.Fatal(http.ListenAndServe(":"+port, router))
}
